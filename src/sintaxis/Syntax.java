
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sintaxis;

import java_cup.runtime.Symbol;
import java.util.Hashtable;
import elementos.*;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\004\000\002\011\002\000\002\002" +
    "\011\000\002\004\003\000\002\004\004\000\002\004\003" +
    "\000\002\004\004\000\002\004\003\000\002\004\004\000" +
    "\002\004\003\000\002\004\004\000\002\004\003\000\002" +
    "\004\004\000\002\012\002\000\002\013\002\000\002\006" +
    "\014\000\002\014\002\000\002\015\002\000\002\007\014" +
    "\000\002\016\002\000\002\017\002\000\002\010\014\000" +
    "\002\005\005\000\002\005\005\000\002\005\007\000\002" +
    "\005\007\000\002\020\002\000\002\003\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\004\004\004\001\002\000\004\005\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\024\010\001\002\000\004\032\000\001\002\000" +
    "\004\032\012\001\002\000\010\004\015\011\013\012\023" +
    "\001\002\000\004\024\101\001\002\000\012\004\015\011" +
    "\013\012\023\033\ufff8\001\002\000\012\010\037\011\041" +
    "\012\040\024\036\001\002\000\012\004\015\011\013\012" +
    "\023\033\ufffe\001\002\000\012\004\015\011\013\012\023" +
    "\033\ufff6\001\002\000\004\033\033\001\002\000\012\004" +
    "\015\011\013\012\023\033\ufffa\001\002\000\012\004\015" +
    "\011\013\012\023\033\ufffc\001\002\000\004\024\024\001" +
    "\002\000\006\017\025\034\026\001\002\000\004\025\027" +
    "\001\002\000\012\004\uffea\011\uffea\012\uffea\033\uffea\001" +
    "\002\000\004\034\030\001\002\000\012\004\uffe8\011\uffe8" +
    "\012\uffe8\033\uffe8\001\002\000\004\033\ufffb\001\002\000" +
    "\004\033\ufff9\001\002\000\004\002\uffff\001\002\000\004" +
    "\033\ufff5\001\002\000\004\033\ufffd\001\002\000\004\026" +
    "\072\001\002\000\004\024\062\001\002\000\004\024\052" +
    "\001\002\000\004\024\042\001\002\000\004\026\ufff1\001" +
    "\002\000\004\026\044\001\002\000\004\027\045\001\002" +
    "\000\004\032\ufff0\001\002\000\004\032\047\001\002\000" +
    "\006\011\013\012\023\001\002\000\004\033\051\001\002" +
    "\000\012\004\uffef\011\uffef\012\uffef\033\uffef\001\002\000" +
    "\004\026\uffee\001\002\000\004\026\054\001\002\000\004" +
    "\027\055\001\002\000\004\032\uffed\001\002\000\004\032" +
    "\057\001\002\000\006\011\013\012\023\001\002\000\004" +
    "\033\061\001\002\000\012\004\uffec\011\uffec\012\uffec\033" +
    "\uffec\001\002\000\004\026\ufff4\001\002\000\004\026\064" +
    "\001\002\000\004\027\065\001\002\000\004\032\ufff3\001" +
    "\002\000\004\032\067\001\002\000\006\011\013\012\023" +
    "\001\002\000\004\033\071\001\002\000\012\004\ufff2\011" +
    "\ufff2\012\ufff2\033\ufff2\001\002\000\004\027\073\001\002" +
    "\000\004\032\uffe7\001\002\000\004\032\075\001\002\000" +
    "\006\011\013\012\023\001\002\000\004\033\077\001\002" +
    "\000\012\004\uffe6\011\uffe6\012\uffe6\033\uffe6\001\002\000" +
    "\004\033\ufff7\001\002\000\006\017\103\034\102\001\002" +
    "\000\012\004\uffeb\011\uffeb\012\uffeb\033\uffeb\001\002\000" +
    "\004\025\104\001\002\000\004\034\105\001\002\000\012" +
    "\004\uffe9\011\uffe9\012\uffe9\033\uffe9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\010\001\001\000\002\001\001\000\016\003\021\004" +
    "\017\005\015\006\020\007\013\010\016\001\001\000\002" +
    "\001\001\000\016\003\021\004\077\005\015\006\020\007" +
    "\013\010\016\001\001\000\002\001\001\000\016\003\021" +
    "\004\034\005\015\006\020\007\013\010\016\001\001\000" +
    "\016\003\021\004\033\005\015\006\020\007\013\010\016" +
    "\001\001\000\002\001\001\000\016\003\021\004\031\005" +
    "\015\006\020\007\013\010\016\001\001\000\016\003\021" +
    "\004\030\005\015\006\020\007\013\010\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\045\001" +
    "\001\000\002\001\001\000\004\005\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\055\001\001" +
    "\000\002\001\001\000\004\005\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\065\001\001\000" +
    "\002\001\001\000\004\005\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\073\001" +
    "\001\000\002\001\001\000\004\005\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    private String ambito = "Global";

    private List<RowTS> SymbolTable=new ArrayList<>();
    private List<RowET> ErrorTable=new ArrayList<>();

    public void syntax_error(Symbol s){
        this.s = s;

        //super.syntax_error(s);

        //System.out.println("scbscbdjsdcbjshb");
        RowET error=new RowET(this.s.value.toString(),this.s.right,this.s.left,"Error sintactica CREO XD");
        ErrorTable.add(error);    
    }
     public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        RowET error=new RowET(this.s.value.toString(),this.s.right,this.s.left,"Error sintactica CREO XD");
        ErrorTable.add(error);
        
        //super.unrecovered_syntax_error(s);
        //Al quitar esta linea el analisis continua, aunque tengas 
        //un error
    }
    public Symbol getS(){
        return this.s;
    }
    public List<RowTS> getSymbolTable(){
        return SymbolTable;
    } 
    public List<RowET> getErrorTable(){
        return ErrorTable;
    }    


    /*
        Analiza los posibles errores semanticos que puedo tener el codigo que estamos analizando.
        @param linea La linea de codigo que estamos analizand.
    */
    public void sematic_error(RowTS linea){
        for(int i=0;i<SymbolTable.size();i++){
                RowTS fila = SymbolTable.get(i);

                //Este IF evalua si una variable esta repetida o no.    
                if(fila.equals(linea) && fila != linea){
                   RowET error = new RowET(linea.getLexema(),i,0,"Error semantico, Nombre repetida.");
                   ErrorTable.add(error);    
                }

                //Evaluamos si el nombre del constructor es el mismo que el de la clase.
                if(fila.getToken() == Tokens.CLASS && linea.getToken() == Tokens.CONSTRUCTOR){
                     if(!fila.getLexema().equalsIgnoreCase(linea.getLexema()) ){
                        RowET error = new RowET(linea.getLexema(),i,0,"Error semantico, Constructor erroneo.");
                        ErrorTable.add(error);
                     }
                }    
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action_part00000000(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int claseNombreleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int claseNombreright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object claseNombre = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;

            RowTS fila=new RowTS(claseNombre.toString(),Tokens.CLASS,"Master",SymbolTable.size(),Tokens.CLASS.getDescripcion()); 
            SymbolTable.add(fila);
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$0",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= PUBLIC CLASS IDENTIFICADOR NT$0 LLAVE_A SENTENCIA LLAVE_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int claseNombreleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int claseNombreright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object claseNombre = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARACION SENTENCIA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= CONSTRUCTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= CONSTRUCTOR SENTENCIA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= METODOVOID 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= METODOVOID SENTENCIA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= METODOINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= METODOINT SENTENCIA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= METODOFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= METODOFLOAT SENTENCIA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              Object RESULT =null;
		int nomIdentleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int nomIdentright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object nomIdent = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
ambito=nomIdent.toString();
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$1",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int nomIdentleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int nomIdentright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object nomIdent = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;

                RowTS fila=new RowTS(nomIdent.toString(),Tokens.VOID,"Global",SymbolTable.size(),Tokens.VOID.getDescripcion()); 
                SymbolTable.add(fila);
                sematic_error(fila);
            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$2",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // METODOVOID ::= PUBLIC VOID IDENTIFICADOR NT$1 PARENTESIS_A PARENTESIS_C NT$2 LLAVE_A DECLARACION LLAVE_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int nomIdentleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int nomIdentright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object nomIdent = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODOVOID",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$3 ::= 
            {
              Object RESULT =null;
		int nomIdentleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int nomIdentright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object nomIdent = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
ambito=nomIdent.toString();
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$3",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int nomIdentleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int nomIdentright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object nomIdent = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;

		RowTS fila=new RowTS(nomIdent.toString(),Tokens.INT,"Global",SymbolTable.size(),Tokens.INT.getDescripcion()); 
                SymbolTable.add(fila);
                sematic_error(fila);
            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$4",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // METODOINT ::= PUBLIC INT IDENTIFICADOR NT$3 PARENTESIS_A PARENTESIS_C NT$4 LLAVE_A DECLARACION LLAVE_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int nomIdentleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int nomIdentright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object nomIdent = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODOINT",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$5 ::= 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int nomIdentleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int nomIdentright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object nomIdent = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
ambito=nomIdent.toString();
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$5",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int nomIdentleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int nomIdentright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object nomIdent = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;

                RowTS fila=new RowTS(nomIdent.toString(),Tokens.FLOAT,"Global",SymbolTable.size(),Tokens.FLOAT.getDescripcion()); 
                SymbolTable.add(fila);
                sematic_error(fila);
            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$6",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // METODOFLOAT ::= PUBLIC FLOAT IDENTIFICADOR NT$5 PARENTESIS_A PARENTESIS_C NT$6 LLAVE_A DECLARACION LLAVE_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).value;
		int nomIdentleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int nomIdentright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object nomIdent = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODOFLOAT",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= INT IDENTIFICADOR FIN_LINEA 
            {
              Object RESULT =null;
		int nomIdentleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int nomIdentright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object nomIdent = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		

               //nomIdent => Nombre del identificador
               RowTS fila=new RowTS(nomIdent.toString(),Tokens.INT,ambito,SymbolTable.size(),Tokens.INT.getDescripcion()); 
               SymbolTable.add(fila);
               sematic_error(fila);
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= FLOAT IDENTIFICADOR FIN_LINEA 
            {
              Object RESULT =null;
		int nomIdentleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int nomIdentright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object nomIdent = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		

               //nomIdent => Nombre del identificador
               RowTS fila=new RowTS(nomIdent.toString(),Tokens.FLOAT,ambito,SymbolTable.size(),Tokens.FLOAT.getDescripcion()); 
               SymbolTable.add(fila);
               sematic_error(fila);
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= INT IDENTIFICADOR IGUAL NUMERO FIN_LINEA 
            {
              Object RESULT =null;
		int nomIdentleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int nomIdentright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object nomIdent = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		

               //nomIdent => Nombre del identificador
               RowTS fila=new RowTS(nomIdent.toString(),Tokens.INT,ambito,SymbolTable.size(),Tokens.INT.getDescripcion()); 
               SymbolTable.add(fila);
               sematic_error(fila);
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= FLOAT IDENTIFICADOR IGUAL NUMERO FIN_LINEA 
            {
              Object RESULT =null;
		int nomIdentleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int nomIdentright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object nomIdent = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		

               //nomIdent => Nombre del identificador
               RowTS fila=new RowTS(nomIdent.toString(),Tokens.FLOAT,ambito,SymbolTable.size(),Tokens.FLOAT.getDescripcion()); 
               SymbolTable.add(fila);
               sematic_error(fila);
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$7 ::= 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;


	//nomIdent => Nombre del identificador
        RowTS fila=new RowTS(nombre.toString(),Tokens.CONSTRUCTOR,ambito,SymbolTable.size(),Tokens.CONSTRUCTOR.getDescripcion()); 
        SymbolTable.add(fila);
        ambito = nombre.toString();
        sematic_error(fila);
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$7",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONSTRUCTOR ::= PUBLIC IDENTIFICADOR PARENTESIS_A PARENTESIS_C NT$7 LLAVE_A DECLARACION LLAVE_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
              return CUP$Syntax$do_action_part00000000(
                               CUP$Syntax$act_num,
                               CUP$Syntax$parser,
                               CUP$Syntax$stack,
                               CUP$Syntax$top);
    }
}

}
